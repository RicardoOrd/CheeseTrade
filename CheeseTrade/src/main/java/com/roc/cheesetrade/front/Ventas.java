/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.roc.cheesetrade.front;

import com.roc.cheesetrade.dao.InvDAO;
import com.roc.cheesetrade.entities.Inv;
import com.roc.cheesetrade.service.VentaService;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nuevo
 */

public class Ventas extends javax.swing.JFrame {

    /**
     * Creates new form Ventas
     */
    private List<Inv> carrito;

    public Ventas() {
        initComponents();
        carrito = new ArrayList<>();
        cargarProductos();
    }

    private void cargarProductos() {
        DefaultTableModel modelo = (DefaultTableModel) tblProductos.getModel();
        modelo.setRowCount(0); // Limpia la tabla
        InvDAO invDAO = new InvDAO();
        List<Inv> productos = invDAO.listar(); // Suponiendo que tienes listar() en InvDAO

        for (Inv prod : productos) {
            Object[] fila = {
                prod.getIdProducto(),
                prod.getNombreProd(),
                prod.getDescripcion(),
                prod.getPrecio(),
                prod.getStock()
            };
            modelo.addRow(fila);
        }
    }

    private void actualizarCarritoUI() {
    DefaultTableModel modelo = (DefaultTableModel) tblCarrito.getModel();
    modelo.setRowCount(0);
    for (Inv item : carrito) {
        double total = item.getPrecio() * item.getStock();
        modelo.addRow(new Object[] {
            item.getIdProducto(),
            item.getNombreProd(),
            item.getStock(),
            item.getPrecio(),
            total
        });
    }
}

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCarrito = new javax.swing.JTable();
        btnAgregarCarrito = new javax.swing.JButton();
        btnRealizarVenta = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnEliminarCarrito = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Descripcion", "Precio", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductos);

        tblCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Cantidad", "Precio Unitario", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCarrito);

        btnAgregarCarrito.setText("Agregar Carrito");
        btnAgregarCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCarritoActionPerformed(evt);
            }
        });

        btnRealizarVenta.setText("Realizar Venta");
        btnRealizarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarVentaActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Ventas");

        btnEliminarCarrito.setText("Eliminar Carrito");
        btnEliminarCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCarritoActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnAgregarCarrito, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEliminarCarrito, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRealizarVenta, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSalir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(43, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgregarCarrito)
                        .addGap(13, 13, 13)
                        .addComponent(btnEliminarCarrito)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRealizarVenta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSalir)
                        .addGap(189, 189, 189))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCarritoActionPerformed
        int row = tblProductos.getSelectedRow();
        if (row != -1) {
            int idProducto = (int) tblProductos.getValueAt(row, 0);
            String nombre = (String) tblProductos.getValueAt(row, 1);
            double precio = Double.parseDouble(tblProductos.getValueAt(row, 3).toString());
            int stock = Integer.parseInt(tblProductos.getValueAt(row, 4).toString());

            String cantidadStr = JOptionPane.showInputDialog(this, "Ingrese la cantidad", "Cantidad", JOptionPane.QUESTION_MESSAGE);

            if (cantidadStr != null) {
                try {
                    int cantidad = Integer.parseInt(cantidadStr);

                    if (cantidad > 0 && cantidad <= stock) {
                        boolean encontrado = false;
                        // Si el producto ya está en el carrito, suma la cantidad
                        for (Inv item : carrito) {
                            if (item.getIdProducto() == idProducto) {
                                if (item.getStock() + cantidad > stock) {
                                    JOptionPane.showMessageDialog(this, "No hay suficiente stock.", "Error", JOptionPane.ERROR_MESSAGE);
                                    return;
                                }
                                item.setStock(item.getStock() + cantidad);
                                encontrado = true;
                                break;
                            }
                        }
                        if (!encontrado) {
                            Inv productoCarrito = new Inv();
                            productoCarrito.setIdProducto(idProducto);
                            productoCarrito.setNombreProd(nombre);
                            productoCarrito.setPrecio(precio);
                            productoCarrito.setStock(cantidad);
                            carrito.add(productoCarrito);
                        }
                        // Actualiza la tabla del carrito
                        actualizarCarritoUI();
                    } else {
                        JOptionPane.showMessageDialog(this, "Cantidad no válida", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Introduce un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona un producto.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarCarritoActionPerformed

    private void btnRealizarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarVentaActionPerformed
        if (carrito.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El carrito está vacío", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Suponiendo que el ID de usuario es 1 (esto debería venir de la sesión o login)
        int idUsuario = 1;

        // Llamar al servicio de venta
        VentaService ventaService = new VentaService();
        boolean ventaExitosa = ventaService.realizarVenta(carrito, idUsuario);

        if (ventaExitosa) {
            JOptionPane.showMessageDialog(this, "Venta realizada con éxito");
            carrito.clear();
            ((DefaultTableModel) tblCarrito.getModel()).setRowCount(0); // Limpiar el carrito
            cargarProductos();
        } else {
            JOptionPane.showMessageDialog(this, "Error al realizar la venta", "Error", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRealizarVentaActionPerformed

    private void btnEliminarCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCarritoActionPerformed
        int row = tblCarrito.getSelectedRow();
        if (row != -1) {
            int idProducto = (int) tblCarrito.getValueAt(row, 0);

            // Busca y elimina el producto del carrito (lista en memoria)
            carrito.removeIf(item -> item.getIdProducto() == idProducto);

            // Actualiza la UI del carrito
            actualizarCarritoUI();
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona un producto en el carrito para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
            // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarCarritoActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarCarrito;
    private javax.swing.JButton btnEliminarCarrito;
    private javax.swing.JButton btnRealizarVenta;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCarrito;
    private javax.swing.JTable tblProductos;
    // End of variables declaration//GEN-END:variables
}
